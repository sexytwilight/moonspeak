(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (global){
(function() {
  var Aui, AuiMixin, AuiOptions, React, cache, jQuery, ref1, ref2, ref3, ref4, ref5, ref6, ref7,
    hasProp = {}.hasOwnProperty,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ref1 = window || global, React = ref1.React, jQuery = ref1.jQuery;

  if (React == null) {
    throw new Error("Aui: window.React not found.");
  }

  if (jQuery == null) {
    console.warn("Aui: window.jQuery not found, Modules and Semantic-UI will be disabled.");
  }

  if ((jQuery != null ? (ref2 = jQuery.site) != null ? (ref3 = ref2.settings) != null ? ref3.modules : void 0 : void 0 : void 0) == null) {
    console.warn('Aui: No Semantic-UI window.jQuery.site.settings.modules found, Semantic will be disabled.');
  }

  AuiMixin = {
    $: function(ref) {
      return jQuery(React.findDOMNode(this.refs[ref] || ref));
    },
    componentWillMount: function() {
      var render;
      render = this.render;
      return this.render = function() {
        var element;
        element = render != null ? typeof render.apply === "function" ? render.apply(this, arguments) : void 0 : void 0;
        if (React.isValidElement(element)) {
          return Aui.classify(element);
        } else {
          return Aui.classify(Aui.warning('Aui.Mixin: Child is not a React.isValidElement', element));
        }
      };
    }
  };

  Aui = React.createClass({
    mixins: [AuiMixin],
    render: function() {
      return Aui.warning('<Aui/> tag is depricated, use Aui.Mixin instead', this.props.children);
    },
    componentDidMount: function() {
      return console.warn(React.findDOMNode(this));
    }
  });

  Aui.Mixin = Aui.AuiMixin = AuiMixin;

  Aui.Aui = Aui;

  Aui.$ = jQuery;

  Aui.warning = function(message, element) {
    console.warn(message, element);
    return React.DOM.span({
      'data-warning': message
    }, element);
  };

  Aui.settings = {
    disableModules: jQuery == null,
    disableSemantic: (jQuery != null ? (ref4 = jQuery.site) != null ? (ref5 = ref4.settings) != null ? ref5.modules : void 0 : void 0 : void 0) == null,
    ignoreChildren: false
  };

  AuiOptions = (function() {
    function AuiOptions(options) {
      var key, ref6, value;
      if (options instanceof AuiOptions) {
        return options;
      }
      if (!(this instanceof AuiOptions)) {
        return new AuiOptions(options);
      }
      options || (options = {});
      ref6 = Aui.settings;
      for (key in ref6) {
        if (!hasProp.call(ref6, key)) continue;
        value = ref6[key];
        this[key] = options[key] != null ? options[key] : value;
      }
    }

    return AuiOptions;

  })();

  Aui.classify = function(element, options) {
    var classify;
    options = AuiOptions(options);
    if (!React.isValidElement(element)) {
      element = Aui.warning('Aui.classify: element is not a React.isValidElement', element);
    }
    classify = function(element) {
      var className, classNames, i, key, len, modules, props, ref6, ref7, value;
      if (!React.isValidElement(element)) {
        return element;
      }
      classNames = {};
      modules = null;
      props = {};
      if (element.props.className != null) {
        ref6 = ("" + element.props.className).split(/\s+/g);
        for (i = 0, len = ref6.length; i < len; i++) {
          className = ref6[i];
          classNames[className] = true;
        }
      }
      ref7 = element.props;
      for (key in ref7) {
        if (!hasProp.call(ref7, key)) continue;
        value = ref7[key];
        if (value === true) {
          classNames[key] = true;
        }
        if ((!options.disableModules) && (Array.isArray(value)) && (indexOf.call(Aui.modules, key) >= 0)) {
          classNames[key] = true;
          modules || (modules = {});
          modules[key] = value;
        }
        props[key] = value;
      }
      props.className = Object.keys(classNames).join(' ');
      if (!props.className.length) {
        delete props.className;
      }
      element = React.cloneElement(element, props, options.ignoreChildren ? element.props.children : React.Children.map(element.props.children, classify));
      if (modules) {
        return React.createElement(Aui.Module, {
          modules: modules,
          options: options
        }, element);
      } else {
        return element;
      }
    };
    return classify(element);
  };

  Aui.modules = ((jQuery != null ? (ref6 = jQuery.site) != null ? (ref7 = ref6.settings) != null ? ref7.modules : void 0 : void 0 : void 0) || []).slice();

  cache = {};

  Aui.Module = React.createClass({
    render: function() {
      return React.Children.only(this.props.children);
    },
    componentDidMount: function() {
      return this.callModules(this.props.children.props);
    },
    componentWillReceiveProps: function(props) {
      return this.callModules(props.children.props);
    },
    callModules: function(props) {
      var $element, module, name, options, ref8, stringifiedOptions;
      $element = jQuery(React.findDOMNode(this));
      this.id = $element.attr('data-reactid');
      cache[name = this.id] || (cache[name] = {});
      ref8 = this.props.modules;
      for (module in ref8) {
        if (!hasProp.call(ref8, module)) continue;
        options = ref8[module];
        stringifiedOptions = JSON.stringify(options);
        if (cache[this.id][module] !== stringifiedOptions) {
          cache[this.id][module] = stringifiedOptions;
          if (typeof $element[module] === "function") {
            $element[module].apply($element, this.props.children.props[module]);
          }
        }
      }
    },
    componentWillUnmount: function() {
      return delete cache[this.id];
    }
  });

  if (typeof window !== "undefined" && window !== null) {
    window.Aui = Aui;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Aui;
  }

}).call(this);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],2:[function(require,module,exports){
(function (global){
var React, exports;

React = (global || window).React;

exports = module.exports = {
  React: React,
  Aui: require('aui')
};


}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"aui":1}],3:[function(require,module,exports){
var Aui, Page, React, cypher, empowered, encryptor, i, index, len, letter, magic, ref, symbol, symbols;

ref = require('./deps.cjsx'), Aui = ref.Aui, React = ref.React;

symbols = "‚ôà‚òΩ‚ôã‚ôé‚ôå‚ôç‚ôä‚ôò‚ò•‚ôÉ‚ôê‚òæ‚ôÇ‚ôÜ‚òâ‚ôì‚òø‚ôë‚òÜ‚ôâ‚ôÑ‚ôÄ‚ôÖ‚ôè‚òÑ‚ôí".split('');

empowered = "üå†";

encryptor = {};

cypher = {};

for (index = i = 0, len = symbols.length; i < len; index = ++i) {
  symbol = symbols[index];
  encryptor[String.fromCharCode(index + 65)] = "" + empowered + symbol;
  letter = String.fromCharCode(index + 97);
  encryptor[letter] = symbol;
  cypher[symbol] = letter;
}

magic = {
  enscribe: window.enscribe = function(scryt) {
    var result;
    result = scryt.replace(/[A-z]/g, function(letter) {
      var rune;
      rune = encryptor[letter] || letter;
      return rune;
    });
    return result;
  },
  decypher: window.decypher = function(enscription) {
    var result;
    result = enscription.replace(new RegExp("(" + empowered + ")?(" + (symbols.join('|')) + ")", 'g'), function(_, big, rune) {
      letter = big ? ("" + (cypher[rune] || rune)).toUpperCase() : "" + (cypher[rune] || rune);
      return letter;
    });
    return result;
  }
};

Page = React.createClass({displayName: "Page",
  mixins: [Aui.Mixin],
  getInitialState: function() {
    return {
      icon: ''
    };
  },
  onClick: function(event) {
    return event.target.select();
  },
  onChange: function(event) {
    var state;
    state = {};
    state[event.target.name] = magic[event.target.name](event.target.value);
    return this.setState(state);
  },
  render: function() {
    return React.createElement("div", {
      "ui": true,
      "page": true,
      "grid": true
    }, React.createElement("div", {
      "ui": true,
      "inverted": true,
      "segment": true,
      "column": true
    }, React.createElement("form", {
      "ui": true,
      "form": true,
      "onSubmit": (function(event) {
        return event.preventDefault();
      })
    }, React.createElement("div", {
      "field": true
    }, React.createElement("textarea", {
      "scryt": true,
      "ui": true,
      "inverted": true,
      "input": true,
      "name": "enscribe",
      "onKeyUp": this.onChange,
      "onClick": this.onClick,
      "placeholder": "Pony Scryt",
      "setValue": this.state.decypher
    })), React.createElement("div", {
      "field": true
    }, React.createElement("textarea", {
      "ui": true,
      "inverted": true,
      "input": true,
      "name": "decypher",
      "onKeyUp": this.onChange,
      "onClick": this.onClick,
      "placeholder": "üå†‚ôÇ‚òâ‚òâ‚ôÜ‚òÜ‚ôì‚ôå‚ôà‚ôê",
      "setValue": this.state.enscribe
    })))));
  }
});

React.render(React.createElement(Page, null), document.body);


},{"./deps.cjsx":2}]},{},[3])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
